# Minsim: A Minimal Simulator Client

## Overview
`Minsim.py` is a minimal simulator client designed to interact with a simulation environment using event-based communication. The script demonstrates how to set up an event dispatcher, subscribe to vessel movement events, and send vessel movement updates. This script utilizes components from the `cos` framework, including `RPCAgent` for inter-process communication (IPC) and `Dispatcher` for event handling.

## Key Components and Functionality

### **1. Initialization (`__init__` and `init`)**
- The `Minsim` class initializes a **dispatcher** (`Dispatcher(self)`) for handling events.
- It sets a **vessel ID** (`self.vessel_id`), which uniquely identifies the vessel being controlled.
- The `init` function:
  - Subscribes to the `vessel.move` event, allowing the client to listen for vessel movement updates.
  - Connects to the inter-process communication system using `RPCAgent()`.

### **2. Event Loop (`loop` and `listen`)**
- The `loop` function continuously listens for events using `listen()`.
- The `listen` function:
  - Calls `self.ipc.pump(self.dispatch)` to retrieve new simulation events.
  - Calls `handle_events()` to process the events.

### **3. Handling Events (`on_vessel_move` and `on_weather_update`)**
- `on_vessel_move(args)`: Prints received vessel movement data.
- `on_weather_update(args)`: A placeholder function to process weather updates (currently commented out in `init`).

### **4. Sending Commands (`move`)**
- The `move(X, Y)` function updates the vessel’s position by:
  - Creating a `Vessel` instance.
  - Calling `v.update(self.vessel_id, {"X": X, "Y": Y})` to send new coordinates to the simulator.

## **What I Learned from This Sample**

1. **Event-Based Simulation Interaction:**
   - The script listens for real-time updates using a dispatcher (`self.dispatch.subscribe`).
   - It processes simulation events via the `listen` and `handle_events` functions.

2. **Inter-Process Communication (IPC):**
   - Uses `RPCAgent()` to connect to the simulation backend and handle message passing.
   - Calls `self.ipc.pump(self.dispatch)` to fetch new events.

3. **Vessel Control via API Calls:**
   - The vessel’s state is updated through API interactions (`Vessel().update(...)`).
   - This structure allows dynamic vessel control based on external inputs.

4. **Extensibility and Modularity:**
   - The script is designed to be extended with additional event handlers (e.g., `on_weather_update`).
   - The `loop` function can be expanded to introduce more simulation logic.

## **Next Steps**
- Implement the `on_weather_update` function to handle weather updates.
- Introduce additional event subscriptions for broader simulation interaction.
- Optimize event handling by adding error handling and logging.

---

This script provides a foundation for building interactive vessel simulations, demonstrating real-time event handling, IPC, and API-based control.
